// return the rank of the number srm 229
public static int getRank( int[] scores, int newscore, int places ) {
	        int greater = 0, lesser = 0, same = 0;
	        for ( int i = 0; i < scores.length; ++i )
	            if ( newscore > scores[ i ] )
	                ++greater;
	            else if ( newscore == scores[ i ] )
	                ++same;
	            else
	                ++lesser;
	        if ( lesser + same >= places )
	            return -1;
	        return lesser + 1;
	    }
// return if the string is made of only your required characters srm 533 PikachuEasy
public static String check1(String word)
	  {
	    while(word.length() > 0) {
	      if(word.startsWith("pi") || word.startsWith("ka")) {
	        word = word.substring(2);
	        continue;
	      } else if(word.startsWith("chu")) {
	        word = word.substring(3);
	        continue;
	      }
	      
	      return "NO";
	    }
	    
	    return "YES";  
	  }
//	  return the largest reach ( how far the robot could go (either left of right)) replacing ? as required SRM 538
	  public static int maxDistance (String program){
		 System.out.println(program);
	    int n = program.length();
	    int pos = 0, d = 0;
	    int ans = 0;
	    for(int i=0;i<n;i++){
	      
	    	if (program.charAt(i)=='L')
	        pos++;
	      
	    	if (program.charAt(i)=='R')
	        pos--;
	      
	    	if (program.charAt(i)=='?')
	        d++;
	        ans = Math.max(ans,Math.abs(pos)+d);
	        System.out.print(ans+ " " );
	      }
	    System.out.println();
	      return ans;
	  }
// comparing two string, and comapring a string char by char (concept of reverse) SRM 713
public String detect(String[] board) {
    boolean v = true, h = true;
    for(int i=0;i<board.length;i++){
      if(!(new StringBuilder(board[i])).reverse().toString().equals(board[i])){
        v = false; break;
      }
    }
    for(int i=0;i<board[0].length();i++){
      String x = "";
      for(int j=0;j<board.length;j++)x += board[j].charAt(i);
      if(!(new StringBuilder(x)).reverse().toString().equals(x)){
        h = false; break;
      }
    }
    if(v && h) return "Both";
    if(v) return "Vertically symmetric";
    if(h) return "Horizontally symmetric";
    return "Neither";
  }
  
	  
// move through an array exactly once each cell SRM 394
	  	 public static int cellsVisited1(String[] x, int heightDifference)
	  {
	    int[] dx = {1,0,-1,0};
	    int[] dy = {0,-1,0,1};
	    boolean[][] v = new boolean[x.length][x[0].length()];
	    int i = 0, j = 0, res = 1;o:
	    while(true){
	      v[i][j] = true;
	      for(int d=0;d<4;++d){
	        int ni = i+dx[d], nj = j+dy[d];
	        if(ni<0||nj<0||ni>=x.length||nj>=x[0].length() || v[ni][nj])
	          continue;
	        int a = x[i].charAt(j) - '0';
	        int b = x[ni].charAt(nj) - '0';
	        if(Math.abs(a-b)>heightDifference)  continue;
	        i=ni; j = nj;
	        res++;
	        continue o;
	      }
	      break;      
	    }
	    
	    return res;
	  }
	  